/******************************************************************************
 *                                                                             
 *                      Woodare PROPRIETARY INFORMATION                        
 *                                                                             
 *          The information contained herein is proprietary to Woodare         
 *           and shall not be reproduced or disclosed in whole or in part      
 *                    or used for any design or manufacture                    
 *              without direct written authorization from FengDa.              
 *                                                                             
 *            Copyright (c) 2013 by Woodare.  All rights reserved.             
 *                                                                             
 *****************************************************************************/
package com.woodare.template.component.schedule;

import java.util.Calendar;
import java.util.Date;
import java.util.List;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;

import com.woodare.core.util.SDFFactory;
import com.woodare.framework.exception.AbstractWooException;
import com.woodare.framework.utils.SaftyBeanUtils;
import com.woodare.framework.utils.SysProperties;
import com.woodare.template.busi.service.PasswayAssitService;
import com.woodare.template.helper.cache.DownMerchants;
import com.woodare.template.jersery.webservice.busi.base.IDownNoCardInvoiceService;
import com.woodare.template.jpa.model.DownNoCardInvoice;
import com.woodare.template.jpa.model.data.EnumOrderStatus;
import com.woodare.template.jpa.persistence.data.downmerchant.DownMerchantData;
import com.woodare.template.jpa.persistence.data.downnocardinvoice.DownNoCardInvoiceData;
import com.woodare.template.jpa.persistence.persistence.IDownNoCardInvoiceDAO;

/**
 * ClassName: NoCardCheckSchedule
 * 
 * @description TODO: 定时触发同步外部交易对确认事件
 * @author Luke
 * @Date Feb 28, 2018
 */
@Service
public class NoCardCheckSchedule implements ICommandJob {
	private static Logger log = Logger.getLogger(NoCardCheckSchedule.class);

	@Autowired
	private IDownNoCardInvoiceService downNoCardInvoiceService;

	@Autowired
	private IDownNoCardInvoiceDAO downNoCardInvoiceDAO;

	private static boolean firstHandleExpiredFundCreated = true;

	/**
	 * 每5m查询一次，10-15分钟内发起支付的数据。
	 */
	@Scheduled(fixedDelay = 5 * 60 * 1000)
	public void checkExpiredOrder_5min() {
		String tagName = "CheckExpiredOrder";
		if (verifyEnabled(tagName)) {
			Calendar c = Calendar.getInstance();
			c.add(Calendar.MINUTE, -10);
			Date end = c.getTime();

			c.add(Calendar.MINUTE, -20);
			Date start = c.getTime();

			this.markExpiredOrderAsFailed(tagName, start, end);
		}
	}

	/**
	 * 每20m查询一次，20-60分钟内发起未发起公链支付的数据。
	 */
	@Scheduled(fixedDelay = 20 * 60 * 1000, initialDelay = 20 * 1000)
	public void checkExpiredFundCreated() {
		String tagName = "HandleExpiredFundCreated";
		if (verifyEnabled(tagName)) {
			Calendar start = Calendar.getInstance();
			Calendar end = Calendar.getInstance();

			if (firstHandleExpiredFundCreated) {
				start.add(Calendar.HOUR, -24);
			}
			else {
				start.add(Calendar.MINUTE, -60);
				end.add(Calendar.MINUTE, -20);
			}

			this.handleExpiredFundCreate(tagName, start.getTime(), end.getTime());
		}
	}

	/**
	 * 每1分钟，针对本地待查证数据，查询一次公网数据状态。
	 */
	@Scheduled(fixedDelay = 1 * 60 * 1000, initialDelay = 30 * 1000)
	public void checkFundPending_1() {
		String tagName = "CheckFundPending1";
		if (verifyEnabled(tagName)) {
			Calendar c = Calendar.getInstance();
			c.add(Calendar.MINUTE, -2);
			Date end = c.getTime();

			c.add(Calendar.MINUTE, -10);
			Date start = c.getTime();

			processingTasks(tagName, start, end);
		}
	}

	/**
	 * 每5分钟，查询一次公网数据。
	 */
	@Scheduled(fixedDelay = 5 * 60 * 1000, initialDelay = 30 * 1000)
	public void checkFundPending_2() {
		String tagName = "CheckFundPending2";
		if (verifyEnabled(tagName)) {
			Calendar c = Calendar.getInstance();
			c.add(Calendar.MINUTE, -10);
			Date end = c.getTime();

			c.add(Calendar.MINUTE, -60);
			Date start = c.getTime();

			processingTasks(tagName, start, end);
		}
	}

	/**
	 * 每20分钟，查询一次公网数据。
	 */
	@Scheduled(fixedDelay = 20 * 60 * 1000, initialDelay = 30 * 1000)
	public void checkFundPending_3() {
		String tagName = "CheckFundPending2";
		if (verifyEnabled(tagName)) {
			Calendar c = Calendar.getInstance();
			c.add(Calendar.MINUTE, -60);
			Date end = c.getTime();

			c.add(Calendar.MINUTE, -240);
			Date start = c.getTime();

			processingTasks(tagName, start, end);
		}
	}

	private boolean verifyEnabled(String tagName) {
		boolean runnning = SysProperties.getInstance().getBooleanProperty("run.timer", false);
		if (!runnning) {
			return false;
		}

		DownMerchantData merc = DownMerchants.getByMchNo("T0001");
		if (merc == null) {
			return false;
		}
		if (!SDFFactory.DATE.format(new Date()).equals(merc.getSettleDate())) {
			log.info("[" + tagName + "]系统正在执行跑批，暂停自动查询");
			return false;
		}
		return true;
	}

	/**
	 * 过期交易标记为失败
	 * 
	 * @param tagName
	 * @param start
	 * @param end
	 */
	private void markExpiredOrderAsFailed(String tagName, Date start, Date end) {
		long startTime = new Date().getTime();
		List<DownNoCardInvoice> invoices = null;
		try {
			invoices = downNoCardInvoiceDAO.findExpiredRecords(start, end);

			DownNoCardInvoiceData invData = new DownNoCardInvoiceData();
			DownNoCardInvoiceData cons = new DownNoCardInvoiceData();

			for (DownNoCardInvoice inv : invoices) {
				invData.setStatus(EnumOrderStatus.FAIL);
				invData.setStatusChgDate(new Date());
				invData.setStatusDesc("支付超时失败");

				cons.setId(inv.getId());
				cons.setStatus(inv.getStatus());

				downNoCardInvoiceDAO.updateSelectiveByCons(invData, cons);
			}

		} finally {
			log.info(tagName + "[" + (new Date().getTime() - startTime) + "]");
		}
	}

	/**
	 * 过期未结算标记为失败
	 * 
	 * @param tagName
	 * @param start
	 * @param end
	 */
	private void handleExpiredFundCreate(String tagName, Date start, Date end) {
		long startTime = new Date().getTime();
		List<DownNoCardInvoice> invoices = null;
		try {
			invoices = downNoCardInvoiceDAO.findExpiredUnChargedByStatusDate(start, end);

			for (DownNoCardInvoice inv : invoices) {
				PasswayAssitService.executeExpired(SaftyBeanUtils.cloneTo(inv, DownNoCardInvoiceData.class));
			}

		} finally {
			log.info(tagName + "[" + (new Date().getTime() - startTime) + "]");
		}
	}

	/**
	 * 
	 */
	private void processingTasks(String tagName, Date start, Date end) {
		List<DownNoCardInvoice> invoices = downNoCardInvoiceDAO.findNeedCheckByFundStatusDate(start, end);
		if (invoices != null) {
			for (DownNoCardInvoice inv : invoices) {
				try {
					downNoCardInvoiceService.orderQuery(inv, false);
				} catch (AbstractWooException e) {
					log.warn(String.format("[" + tagName + "]AutoSyncOrder[%s]%s", inv.getTransNo(), e.getMessage()));
				} catch (Exception e) {
					log.error(String.format("[" + tagName + "]AutoSyncOrder[%s]%s", inv.getTransNo(), e.getMessage()), e);
				}
			}
		}
	}

	@Override
	public void execute(Object param) {
		try {
		} catch (Exception e) {
			log.error(e, e);
		}
	}
}
