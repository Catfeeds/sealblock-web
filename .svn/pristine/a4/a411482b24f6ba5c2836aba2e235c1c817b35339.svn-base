package com.woodare.template.helper.cache;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

import com.woodare.template.jpa.model.SubMerchantFundAccount;

/**
 * 平台地址完整数据
 * 监控(目前只考虑单台主机情况)**
 * 
 * @author Luke
 */
public class CoinAddrs {
	private static Map<String, List<String>> coinFundAddrsMap = new ConcurrentHashMap<String, List<String>>();

	/**
	 * 确认交易地址是否在平台登记
	 * 
	 * @param coin
	 * @param from
	 * @param to
	 * @return
	 */
	public static boolean acceptTrans(String coin, String from, String to) {
		List<String> addrs = coinFundAddrsMap.get(coin);
		return addrs != null ? addrs.contains(from) || addrs.contains(to) : false;
	}

	/**
	 * 确认交易地址是否在平台登记
	 * 
	 * @param coin
	 * @param from
	 * @param to
	 * @return
	 */
	public static boolean acceptAddress(String coin, String address) {
		List<String> addrs = coinFundAddrsMap.get(coin);
		return addrs != null ? addrs.contains(address) : false;
	}

	/**
	 * 重置所有账户数据
	 * 
	 * @param fundAccounts
	 */
	public static void resetAll(List<SubMerchantFundAccount> fundAccounts) {
		Map<String, List<String>> _coinFundAddrsMap = new ConcurrentHashMap<String, List<String>>();
		for (SubMerchantFundAccount fundAccount : fundAccounts) {
			if (!_coinFundAddrsMap.containsKey(fundAccount.getCoin())) {
				_coinFundAddrsMap.put(fundAccount.getCoin(), new ArrayList<String>());
			}
			_coinFundAddrsMap.get(fundAccount.getCoin()).add(fundAccount.getAddress());
		}
		coinFundAddrsMap = _coinFundAddrsMap;
	}

	/**
	 * 添加新数据
	 * 
	 * @param fundAccounts
	 */
	public static void add(SubMerchantFundAccount fundAccount) {
		if (!coinFundAddrsMap.containsKey(fundAccount.getCoin())) {
			coinFundAddrsMap.put(fundAccount.getCoin(), new ArrayList<String>());
		}
		coinFundAddrsMap.get(fundAccount.getCoin()).add(fundAccount.getAddress());
	}

}
