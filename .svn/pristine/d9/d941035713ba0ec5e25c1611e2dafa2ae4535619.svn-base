package com.woodare.template.busi.service;

import java.util.Date;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.woodare.core.util.SDFFactory;
import com.woodare.template.component.job.ITaskJob;
import com.woodare.template.component.job.SimpleTaskJob;
import com.woodare.template.egw.debit.SealblockPasswayEgw;
import com.woodare.template.jpa.model.DownNoCardInvoice;
import com.woodare.template.jpa.model.SubMerchant;
import com.woodare.template.jpa.model.SubMerchantFundAccount;
import com.woodare.template.jpa.model.data.EnumOrderStatus;
import com.woodare.template.jpa.persistence.data.downnocardinvoice.DownNoCardInvoiceData;
import com.woodare.template.jpa.persistence.persistence.IDownNoCardInvoiceDAO;
import com.woodare.template.jpa.persistence.persistence.ISubMerchantDAO;
import com.woodare.template.jpa.persistence.persistence.ISubMerchantFundAccountDAO;

/**
 * @author Luke
 */
@Service("passwayAssitService")
public class PasswayAssitService implements ITaskJob {
	private Log log = LogFactory.getLog(PasswayAssitService.class);

	public static ExecutorService fixedThreadPool = Executors.newFixedThreadPool(50);

	/**
	 * @param obj
	 */
	public static void asyncExecute(Object obj) {
		fixedThreadPool.execute(new SimpleTaskJob("passwayAssitService", obj));
	}

	@Autowired
	private IDownNoCardInvoiceDAO downNoCardInvoiceDAO;

	@Autowired
	private ISubMerchantDAO subMerchantDAO;

	@Autowired
	private ISubMerchantFundAccountDAO subMerchantFundAccountDAO;

	@Autowired
	private SealblockPasswayEgw sealblockPasswayEgw;

	@Override
	public void executeTask(Object obj) {
		String oriThreadName = Thread.currentThread().getName();
		Thread.currentThread().setName(SDFFactory.getNotifyId());
		try {
			if (obj instanceof DownNoCardInvoiceData) {
				DownNoCardInvoice inv = downNoCardInvoiceDAO.findOne(((DownNoCardInvoiceData) obj).getId());

				if (EnumOrderStatus.CREATE.equals(inv.getFundStatus())) {
					SubMerchant userData = subMerchantDAO.findByUserNo(inv.getUserNo());
					SubMerchantFundAccount userFundData = subMerchantFundAccountDAO.findByUserNoAndCoin(inv.getUserNo(), inv.getCoin());
					
					DownNoCardInvoiceData values = new DownNoCardInvoiceData();
					DownNoCardInvoiceData cons = new DownNoCardInvoiceData();

					values.setFundChgDate(new Date());
					values.setFundStatus(EnumOrderStatus.PROCESSING);
					cons.setStatus(inv.getFundStatus());
					cons.setId(inv.getId());
					downNoCardInvoiceDAO.updateSelectiveByCons(values, cons);


					DownNoCardInvoiceData newInvData = sealblockPasswayEgw.sendTransaction(inv, userData);

					values.setFundChgDate(new Date());
					values.setUpTransNo(newInvData.getUpTransNo());

					cons.setStatus(EnumOrderStatus.PROCESSING);
					downNoCardInvoiceDAO.updateSelectiveByCons(values, cons);
				}
			}
		}
		//
		catch (Exception e) {
			log.error(e, e);
		}
		//
		finally {
			Thread.currentThread().setName(oriThreadName);
		}
	}
}
