package com.woodare.template.busi.service;

import java.util.Date;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.woodare.core.util.SDFFactory;
import com.woodare.sealblock.util.SealblockException;
import com.woodare.sealblock.util.SealblockResponseException;
import com.woodare.template.component.job.ITaskJob;
import com.woodare.template.component.job.SimpleTaskJob;
import com.woodare.template.egw.debit.SealblockPasswayEgw;
import com.woodare.template.jpa.model.DownNoCardInvoice;
import com.woodare.template.jpa.model.SubMerchant;
import com.woodare.template.jpa.model.data.EnumOrderStatus;
import com.woodare.template.jpa.persistence.data.downnocardinvoice.DownNoCardInvoiceData;
import com.woodare.template.jpa.persistence.persistence.IDownNoCardInvoiceDAO;
import com.woodare.template.jpa.persistence.persistence.ISubMerchantDAO;

/**
 * @author Luke
 */
@Service("passwayAssitService")
public class PasswayAssitService implements ITaskJob {
	private Log log = LogFactory.getLog(PasswayAssitService.class);

	// 实时执行队列
	public static ExecutorService fixedThreadPool = Executors.newFixedThreadPool(50);

	// 补偿执行队列
	public static ExecutorService expiredCreatePool = Executors.newFixedThreadPool(20);

	/**
	 * @param obj
	 */
	public static void asyncExecute(Object obj) {
		fixedThreadPool.execute(new SimpleTaskJob("passwayAssitService", obj));
	}

	/**
	 * @param obj
	 */
	public static void executeExpired(Object obj) {
		expiredCreatePool.execute(new SimpleTaskJob("passwayAssitService", obj));
	}

	@Autowired
	private IDownNoCardInvoiceDAO downNoCardInvoiceDAO;

	@Autowired
	private ISubMerchantDAO subMerchantDAO;

    // @Autowired
    // private ISubMerchantFundAccountDAO subMerchantFundAccountDAO;

	@Autowired
	private SealblockPasswayEgw sealblockPasswayEgw;

	@Override
	public void executeTask(Object obj) {
		String oriThreadName = Thread.currentThread().getName();
		Thread.currentThread().setName(SDFFactory.getNotifyId());
		try {
			if (obj instanceof DownNoCardInvoiceData) {
				doHandleInvoice((DownNoCardInvoiceData) obj);
			}
		}
		//
		catch (Exception e) {
			log.error(e, e);
		}
		//
		finally {
			Thread.currentThread().setName(oriThreadName);
		}
	}

	/**
	 * @param invData
	 */
	private void doHandleInvoice(Object invData) {
		DownNoCardInvoice inv = downNoCardInvoiceDAO.findOne(((DownNoCardInvoiceData) invData).getId());
		if (!EnumOrderStatus.CREATE.equals(inv.getFundStatus())) {
			log.debug("StatusChangedIgnoreSendAction1[]" + inv.getTransNo());
			return;
		}

		DownNoCardInvoiceData values = new DownNoCardInvoiceData();
		DownNoCardInvoiceData cons = new DownNoCardInvoiceData();

		values.setFundChgDate(new Date());
		values.setFundStatus(EnumOrderStatus.PROCESSING);

		cons.setStatus(inv.getStatus());
		cons.setFundStatus(inv.getFundStatus());
		cons.setId(inv.getId());

		try {
			SubMerchant userData = subMerchantDAO.findByUserNo(inv.getUserNo());
			// SubMerchantFundAccount userFundData = subMerchantFundAccountDAO.findByUserNoAndCoin(inv.getUserNo(), inv.getCoin());

			int ret = downNoCardInvoiceDAO.updateSelectiveByCons(values, cons);

			if (ret == 0) {
				log.debug("StatusChangedIgnoreSendAction2[]" + inv.getTransNo());
			}
			else {
				DownNoCardInvoiceData newInvData = sealblockPasswayEgw.sendTransaction(inv, userData);

				values.setFundChgDate(new Date());
				values.setUpTransNo(newInvData.getUpTransNo());

				cons.setStatus(EnumOrderStatus.PROCESSING);
				cons.setFundStatus(EnumOrderStatus.PROCESSING);
				ret = downNoCardInvoiceDAO.updateSelectiveByCons(values, cons);
				if (ret == 0) {
					log.warn("StatusChangedWarning[]" + inv.getTransNo());
				}
			}
		}
		// 异常处理成 待查证 或者失败
		catch (Exception e) {
			// 设置状态变更时间
			values.setFundChgDate(new Date());

			// 限制原状态为待查证
			cons.setFundStatus(EnumOrderStatus.PROCESSING);

			// 请求发送失败
			if (e instanceof SealblockResponseException) {
				// 限制原状态时间
				values.setFundStatus(EnumOrderStatus.PROCESSING);
				values.setFundStatusDesc(trimWithLength(((SealblockException) e).getFriendMessage(), 100));
			}
			// 其他为识别异常，均判定为失败，需人工处理
			else if (e instanceof SealblockException) {
				values.setFundStatus(EnumOrderStatus.ERROR);
				values.setFundStatusDesc(trimWithLength(((SealblockException) e).getFriendMessage(), 100));
			}
			// 其他暂时当作待查证处理
			else {
				values.setFundStatus(EnumOrderStatus.PROCESSING);
				values.setFundStatusDesc(trimWithLength(e.getMessage(), 100));
			}

			downNoCardInvoiceDAO.updateSelectiveByCons(values, cons);
		}
	}

	/**
	 * @param message
	 * @param size
	 * @return
	 */
	private String trimWithLength(String message, int size) {
		if (message != null && message.length() > size) {
			message = message.substring(0, size - 2) + "..";
		}
		return message;
	}
}
